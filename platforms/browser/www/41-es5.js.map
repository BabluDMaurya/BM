{"version":3,"sources":["node_modules/@ionic/core/dist/esm/ion-nav_5.entry.js"],"names":[],"mappings":"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","sourcesContent":["import { r as registerInstance, d as createEvent, c as getIonMode, h, e as getElement, H as Host } from './core-feeeff0d.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { b as assert } from './helpers-46f4a262.js';\nimport { d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './constants-3c3e1099.js';\nimport { a as attachComponent } from './framework-delegate-c2e2e1f4.js';\nimport { l as lifecycle, t as transition, s as setPageHidden } from './index-4d91f03a.js';\nimport { g as getTimeGivenProgression, P as Point } from './cubic-bezier-2812fda3.js';\n\nconst VIEW_STATE_NEW = 1;\r\nconst VIEW_STATE_ATTACHED = 2;\r\nconst VIEW_STATE_DESTROYED = 3;\r\nclass ViewController {\r\n    constructor(component, params) {\r\n        this.component = component;\r\n        this.params = params;\r\n        this.state = VIEW_STATE_NEW;\r\n    }\r\n    async init(container) {\r\n        this.state = VIEW_STATE_ATTACHED;\r\n        if (!this.element) {\r\n            const component = this.component;\r\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\r\n        }\r\n    }\r\n    /**\r\n     * DOM WRITE\r\n     */\r\n    _destroy() {\r\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\r\n        const element = this.element;\r\n        if (element) {\r\n            if (this.delegate) {\r\n                this.delegate.removeViewFromDom(element.parentElement, element);\r\n            }\r\n            else {\r\n                element.remove();\r\n            }\r\n        }\r\n        this.nav = undefined;\r\n        this.state = VIEW_STATE_DESTROYED;\r\n    }\r\n}\r\nconst matches = (view, id, params) => {\r\n    if (!view) {\r\n        return false;\r\n    }\r\n    if (view.component !== id) {\r\n        return false;\r\n    }\r\n    const currentParams = view.params;\r\n    if (currentParams === params) {\r\n        return true;\r\n    }\r\n    if (!currentParams && !params) {\r\n        return true;\r\n    }\r\n    if (!currentParams || !params) {\r\n        return false;\r\n    }\r\n    const keysA = Object.keys(currentParams);\r\n    const keysB = Object.keys(params);\r\n    if (keysA.length !== keysB.length) {\r\n        return false;\r\n    }\r\n    // Test for A's keys different from B.\r\n    for (const key of keysA) {\r\n        if (currentParams[key] !== params[key]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n};\r\nconst convertToView = (page, params) => {\r\n    if (!page) {\r\n        return null;\r\n    }\r\n    if (page instanceof ViewController) {\r\n        return page;\r\n    }\r\n    return new ViewController(page, params);\r\n};\r\nconst convertToViews = (pages) => {\r\n    return pages.map(page => {\r\n        if (page instanceof ViewController) {\r\n            return page;\r\n        }\r\n        if ('page' in page) {\r\n            return convertToView(page.page, page.params);\r\n        }\r\n        return convertToView(page, undefined);\r\n    }).filter(v => v !== null);\r\n};\n\nconst Nav = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.transInstr = [];\n        this.animationEnabled = true;\n        this.useRouter = false;\n        this.isTransitioning = false;\n        this.destroyed = false;\n        this.views = [];\n        /**\n         * If `true`, the nav should animate the transition of components.\n         */\n        this.animated = true;\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    }\n    swipeGestureChanged() {\n        if (this.gesture) {\n            this.gesture.setDisabled(this.swipeGesture !== true);\n        }\n    }\n    rootChanged() {\n        if (this.root !== undefined) {\n            if (!this.useRouter) {\n                this.setRoot(this.root, this.rootParams);\n            }\n        }\n    }\n    componentWillLoad() {\n        this.useRouter =\n            !!document.querySelector('ion-router') &&\n                !this.el.closest('[no-router]');\n        if (this.swipeGesture === undefined) {\n            const mode = getIonMode(this);\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n        }\n        this.ionNavWillLoad.emit();\n    }\n    async componentDidLoad() {\n        this.rootChanged();\n        this.gesture = (await import('./swipe-back-35ad8e37.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n        this.swipeGestureChanged();\n    }\n    componentDidUnload() {\n        for (const view of this.views) {\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            view._destroy();\n        }\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        // release swipe back gesture and transition\n        this.transInstr.length = this.views.length = 0;\n        this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    push(component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: -1,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insert(insertIndex, component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insertPages(insertIndex, insertComponents, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: insertComponents,\n            opts\n        }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    pop(opts, done) {\n        return this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts\n        }, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popTo(indexOrViewCtrl, opts, done) {\n        const tiConfig = {\n            removeStart: -1,\n            removeCount: -1,\n            opts\n        };\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n            tiConfig.removeView = indexOrViewCtrl;\n            tiConfig.removeStart = 1;\n        }\n        else if (typeof indexOrViewCtrl === 'number') {\n            tiConfig.removeStart = indexOrViewCtrl + 1;\n        }\n        return this.queueTrns(tiConfig, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popToRoot(opts, done) {\n        return this.queueTrns({\n            removeStart: 1,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    removeIndex(startIndex, removeCount = 1, opts, done) {\n        return this.queueTrns({\n            removeStart: startIndex,\n            removeCount,\n            opts\n        }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setRoot(component, componentProps, opts, done) {\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setPages(views, opts, done) {\n        if (opts == null) {\n            opts = {};\n        }\n        // if animation wasn't set to true then default it to NOT animate\n        if (opts.animated !== true) {\n            opts.animated = false;\n        }\n        return this.queueTrns({\n            insertStart: 0,\n            insertViews: views,\n            removeStart: 0,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /** @internal */\n    setRouteId(id, params, direction) {\n        const active = this.getActiveSync();\n        if (matches(active, id, params)) {\n            return Promise.resolve({\n                changed: false,\n                element: active.element\n            });\n        }\n        let resolve;\n        const promise = new Promise(r => (resolve = r));\n        let finish;\n        const commonOpts = {\n            updateURL: false,\n            viewIsReady: enteringEl => {\n                let mark;\n                const p = new Promise(r => (mark = r));\n                resolve({\n                    changed: true,\n                    element: enteringEl,\n                    markVisible: async () => {\n                        mark();\n                        await finish;\n                    }\n                });\n                return p;\n            }\n        };\n        if (direction === 'root') {\n            finish = this.setRoot(id, params, commonOpts);\n        }\n        else {\n            const viewController = this.views.find(v => matches(v, id, params));\n            if (viewController) {\n                finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back' }));\n            }\n            else if (direction === 'forward') {\n                finish = this.push(id, params, commonOpts);\n            }\n            else if (direction === 'back') {\n                finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true }));\n            }\n        }\n        return promise;\n    }\n    /** @internal */\n    async getRouteId() {\n        const active = this.getActiveSync();\n        return active\n            ? {\n                id: active.element.tagName,\n                params: active.params,\n                element: active.element\n            }\n            : undefined;\n    }\n    /**\n     * Get the active view.\n     */\n    getActive() {\n        return Promise.resolve(this.getActiveSync());\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n    getByIndex(index) {\n        return Promise.resolve(this.views[index]);\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n    canGoBack(view) {\n        return Promise.resolve(this.canGoBackSync(view));\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n    getPrevious(view) {\n        return Promise.resolve(this.getPreviousSync(view));\n    }\n    getLength() {\n        return this.views.length;\n    }\n    getActiveSync() {\n        return this.views[this.views.length - 1];\n    }\n    canGoBackSync(view = this.getActiveSync()) {\n        return !!(view && this.getPreviousSync(view));\n    }\n    getPreviousSync(view = this.getActiveSync()) {\n        if (!view) {\n            return undefined;\n        }\n        const views = this.views;\n        const index = views.indexOf(view);\n        return index > 0 ? views[index - 1] : undefined;\n    }\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n    queueTrns(ti, done) {\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n            return Promise.resolve(false);\n        }\n        const promise = new Promise((resolve, reject) => {\n            ti.resolve = resolve;\n            ti.reject = reject;\n        });\n        ti.done = done;\n        // Normalize empty\n        if (ti.insertViews && ti.insertViews.length === 0) {\n            ti.insertViews = undefined;\n        }\n        // Enqueue transition instruction\n        this.transInstr.push(ti);\n        // if there isn't a transition already happening\n        // then this will kick off this transition\n        this.nextTrns();\n        return promise;\n    }\n    success(result, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        if (ti.done) {\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n        }\n        ti.resolve(result.hasCompleted);\n        if (ti.opts.updateURL !== false && this.useRouter) {\n            const router = document.querySelector('ion-router');\n            if (router) {\n                const direction = result.direction === 'back' ? 'back' : 'forward';\n                router.navChanged(direction);\n            }\n        }\n    }\n    failed(rejectReason, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        this.transInstr.length = 0;\n        this.fireError(rejectReason, ti);\n    }\n    fireError(rejectReason, ti) {\n        if (ti.done) {\n            ti.done(false, false, rejectReason);\n        }\n        if (ti.reject && !this.destroyed) {\n            ti.reject(rejectReason);\n        }\n        else {\n            ti.resolve(false);\n        }\n    }\n    nextTrns() {\n        // this is the framework's bread 'n butta function\n        // only one transition is allowed at any given time\n        if (this.isTransitioning) {\n            return false;\n        }\n        // there is no transition happening right now\n        // get the next instruction\n        const ti = this.transInstr.shift();\n        if (!ti) {\n            return false;\n        }\n        this.runTransition(ti);\n        return true;\n    }\n    async runTransition(ti) {\n        try {\n            // set that this nav is actively transitioning\n            this.ionNavWillChange.emit();\n            this.isTransitioning = true;\n            this.prepareTI(ti);\n            const leavingView = this.getActiveSync();\n            const enteringView = this.getEnteringView(ti, leavingView);\n            if (!leavingView && !enteringView) {\n                throw new Error('no views in the stack to be removed');\n            }\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n                await enteringView.init(this.el);\n            }\n            this.postViewInit(enteringView, leavingView, ti);\n            // Needs transition?\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n                enteringView !== leavingView;\n            const result = requiresTransition\n                ? await this.transition(enteringView, leavingView, ti)\n                : {\n                    // transition is not required, so we are already done!\n                    // they're inserting/removing the views somewhere in the middle or\n                    // beginning, so visually nothing needs to animate/transition\n                    // resolve immediately because there's no animation that's happening\n                    hasCompleted: true,\n                    requiresTransition: false\n                };\n            this.success(result, ti);\n            this.ionNavDidChange.emit();\n        }\n        catch (rejectReason) {\n            this.failed(rejectReason, ti);\n        }\n        this.isTransitioning = false;\n        this.nextTrns();\n    }\n    prepareTI(ti) {\n        const viewsLength = this.views.length;\n        ti.opts = ti.opts || {};\n        if (ti.opts.delegate === undefined) {\n            ti.opts.delegate = this.delegate;\n        }\n        if (ti.removeView !== undefined) {\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n            const index = this.views.indexOf(ti.removeView);\n            if (index < 0) {\n                throw new Error('removeView was not found');\n            }\n            ti.removeStart += index;\n        }\n        if (ti.removeStart !== undefined) {\n            if (ti.removeStart < 0) {\n                ti.removeStart = viewsLength - 1;\n            }\n            if (ti.removeCount < 0) {\n                ti.removeCount = viewsLength - ti.removeStart;\n            }\n            ti.leavingRequiresTransition =\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n        }\n        if (ti.insertViews) {\n            // allow -1 to be passed in to auto push it on the end\n            // and clean up the index if it's larger then the size of the stack\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n                ti.insertStart = viewsLength;\n            }\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n        }\n        const insertViews = ti.insertViews;\n        if (!insertViews) {\n            return;\n        }\n        assert(insertViews.length > 0, 'length can not be zero');\n        const viewControllers = convertToViews(insertViews);\n        if (viewControllers.length === 0) {\n            throw new Error('invalid views to insert');\n        }\n        // Check all the inserted view are correct\n        for (const view of viewControllers) {\n            view.delegate = ti.opts.delegate;\n            const nav = view.nav;\n            if (nav && nav !== this) {\n                throw new Error('inserted view was already inserted');\n            }\n            if (view.state === VIEW_STATE_DESTROYED) {\n                throw new Error('inserted view was already destroyed');\n            }\n        }\n        ti.insertViews = viewControllers;\n    }\n    getEnteringView(ti, leavingView) {\n        const insertViews = ti.insertViews;\n        if (insertViews !== undefined) {\n            // grab the very last view of the views to be inserted\n            // and initialize it as the new entering view\n            return insertViews[insertViews.length - 1];\n        }\n        const removeStart = ti.removeStart;\n        if (removeStart !== undefined) {\n            const views = this.views;\n            const removeEnd = removeStart + ti.removeCount;\n            for (let i = views.length - 1; i >= 0; i--) {\n                const view = views[i];\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n                    return view;\n                }\n            }\n        }\n        return undefined;\n    }\n    postViewInit(enteringView, leavingView, ti) {\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n        assert(ti.resolve, 'resolve must be valid');\n        assert(ti.reject, 'reject must be valid');\n        const opts = ti.opts;\n        const insertViews = ti.insertViews;\n        const removeStart = ti.removeStart;\n        const removeCount = ti.removeCount;\n        let destroyQueue;\n        // there are views to remove\n        if (removeStart !== undefined && removeCount !== undefined) {\n            assert(removeStart >= 0, 'removeStart can not be negative');\n            assert(removeCount >= 0, 'removeCount can not be negative');\n            destroyQueue = [];\n            for (let i = 0; i < removeCount; i++) {\n                const view = this.views[i + removeStart];\n                if (view && view !== enteringView && view !== leavingView) {\n                    destroyQueue.push(view);\n                }\n            }\n            // default the direction to \"back\"\n            opts.direction = opts.direction || 'back';\n        }\n        const finalBalance = this.views.length +\n            (insertViews !== undefined ? insertViews.length : 0) -\n            (removeCount !== undefined ? removeCount : 0);\n        assert(finalBalance >= 0, 'final balance can not be negative');\n        if (finalBalance === 0) {\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n            throw new Error('navigation stack needs at least one root page');\n        }\n        // At this point the transition can not be rejected, any throw should be an error\n        // there are views to insert\n        if (insertViews) {\n            // add the views to the\n            let insertIndex = ti.insertStart;\n            for (const view of insertViews) {\n                this.insertViewAt(view, insertIndex);\n                insertIndex++;\n            }\n            if (ti.enteringRequiresTransition) {\n                // default to forward if not already set\n                opts.direction = opts.direction || 'forward';\n            }\n        }\n        // if the views to be removed are in the beginning or middle\n        // and there is not a view that needs to visually transition out\n        // then just destroy them and don't transition anything\n        // batch all of lifecycles together\n        // let's make sure, callbacks are zoned\n        if (destroyQueue && destroyQueue.length > 0) {\n            for (const view of destroyQueue) {\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            }\n            // once all lifecycle events has been delivered, we can safely detroy the views\n            for (const view of destroyQueue) {\n                this.destroyView(view);\n            }\n        }\n    }\n    async transition(enteringView, leavingView, ti) {\n        // we should animate (duration > 0) if the pushed page is not the first one (startup)\n        // or if it is a portal (modal, actionsheet, etc.)\n        const opts = ti.opts;\n        const progressCallback = opts.progressAnimation\n            ? (ani) => this.sbAni = ani\n            : undefined;\n        const mode = getIonMode(this);\n        const enteringEl = enteringView.element;\n        const leavingEl = leavingView && leavingView.element;\n        const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n            leavingEl }, opts);\n        const { hasCompleted } = await transition(animationOpts);\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    }\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n        const cleanupView = hasCompleted ? enteringView : leavingView;\n        if (cleanupView) {\n            this.cleanup(cleanupView);\n        }\n        return {\n            hasCompleted,\n            requiresTransition: true,\n            enteringView,\n            leavingView,\n            direction: opts.direction\n        };\n    }\n    insertViewAt(view, index) {\n        const views = this.views;\n        const existingIndex = views.indexOf(view);\n        if (existingIndex > -1) {\n            // this view is already in the stack!!\n            // move it to its new location\n            assert(view.nav === this, 'view is not part of the nav');\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n        }\n        else {\n            assert(!view.nav, 'nav is used');\n            // this is a new view to add to the stack\n            // create the new entering view\n            view.nav = this;\n            // insert the entering view into the correct index in the stack\n            views.splice(index, 0, view);\n        }\n    }\n    removeView(view) {\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n        const views = this.views;\n        const index = views.indexOf(view);\n        assert(index > -1, 'view must be part of the stack');\n        if (index >= 0) {\n            views.splice(index, 1);\n        }\n    }\n    destroyView(view) {\n        view._destroy();\n        this.removeView(view);\n    }\n    /**\n     * DOM WRITE\n     */\n    cleanup(activeView) {\n        // ok, cleanup time!! Destroy all of the views that are\n        // INACTIVE and come after the active view\n        // only do this if the views exist, though\n        if (this.destroyed) {\n            return;\n        }\n        const views = this.views;\n        const activeViewIndex = views.indexOf(activeView);\n        for (let i = views.length - 1; i >= 0; i--) {\n            const view = views[i];\n            const element = view.element;\n            if (i > activeViewIndex) {\n                // this view comes after the active view\n                // let's unload it\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n                this.destroyView(view);\n            }\n            else if (i < activeViewIndex) {\n                // this view comes before the active view\n                // and it is not a portal then ensure it is hidden\n                setPageHidden(element, true);\n            }\n        }\n    }\n    canStart() {\n        return (!!this.swipeGesture &&\n            !this.isTransitioning &&\n            this.transInstr.length === 0 &&\n            this.animationEnabled &&\n            this.canGoBackSync());\n    }\n    onStart() {\n        this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts: {\n                direction: 'back',\n                progressAnimation: true\n            }\n        }, undefined);\n    }\n    onMove(stepValue) {\n        if (this.sbAni) {\n            this.sbAni.progressStep(stepValue);\n        }\n    }\n    onEnd(shouldComplete, stepValue, dur) {\n        if (this.sbAni) {\n            this.animationEnabled = false;\n            this.sbAni.onFinish(() => {\n                this.animationEnabled = true;\n            }, { oneTimeCallback: true });\n            // Account for rounding errors in JS\n            let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n            /**\n             * Animation will be reversed here, so need to\n             * reverse the easing curve as well\n             *\n             * Additionally, we need to account for the time relative\n             * to the new easing curve, as `stepValue` is going to be given\n             * in terms of a linear curve.\n             */\n            if (!shouldComplete) {\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n                newStepValue += getTimeGivenProgression(new Point(0, 0), new Point(1, 0), new Point(0.68, 0.28), new Point(1, 1), stepValue);\n            }\n            else {\n                newStepValue += getTimeGivenProgression(new Point(0, 0), new Point(0.32, 0.72), new Point(0, 1), new Point(1, 1), stepValue);\n            }\n            this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n        }\n    }\n    render() {\n        return (h(\"slot\", null));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n    }; }\n    static get style() { return \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\"; }\n};\n\nconst navLink = (el, routerDirection, component, componentProps) => {\r\n    const nav = el.closest('ion-nav');\r\n    if (nav) {\r\n        if (routerDirection === 'forward') {\r\n            if (component !== undefined) {\r\n                return nav.push(component, componentProps, { skipIfBusy: true });\r\n            }\r\n        }\r\n        else if (routerDirection === 'root') {\r\n            if (component !== undefined) {\r\n                return nav.setRoot(component, componentProps, { skipIfBusy: true });\r\n            }\r\n        }\r\n        else if (routerDirection === 'back') {\r\n            return nav.pop({ skipIfBusy: true });\r\n        }\r\n    }\r\n    return Promise.resolve(false);\r\n};\n\nconst NavLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * The transition direction when navigating to another page.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = () => {\n            return navLink(this.el, this.routerDirection, this.component, this.componentProps);\n        };\n    }\n    render() {\n        return (h(Host, { onClick: this.onClick }));\n    }\n    get el() { return getElement(this); }\n};\n\nconst NavPop = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.pop = () => {\n            return navLink(this.el, 'back');\n        };\n    }\n    componentDidLoad() {\n        console.warn('[DEPRECATED][ion-nav-pop] <ion-nav-pop> is deprecated. Use `<ion-nav-link routerDirection=\"back\">` instead.');\n    }\n    render() {\n        return (h(Host, { onClick: this.pop }));\n    }\n    get el() { return getElement(this); }\n};\n\nconst NavPush = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.push = () => {\n            return navLink(this.el, 'forward', this.component, this.componentProps);\n        };\n    }\n    componentDidLoad() {\n        console.warn('[DEPRECATED][ion-nav-push] `<ion-nav-push component=\"MyComponent\">` is deprecated. Use `<ion-nav-link component=\"MyComponent\">` instead.');\n    }\n    render() {\n        return (h(Host, { onClick: this.push }));\n    }\n    get el() { return getElement(this); }\n};\n\nconst NavSetRoot = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.setRoot = () => {\n            return navLink(this.el, 'root', this.component, this.componentProps);\n        };\n    }\n    componentDidLoad() {\n        console.warn('[DEPRECATED][ion-nav-set-root] `<ion-nav-set-root component=\"MyComponent\">` is deprecated. Use `<ion-nav-link component=\"MyComponent\" routerDirection=\"root\">` instead.');\n    }\n    render() {\n        return (h(Host, { onClick: this.setRoot }));\n    }\n    get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link, NavPop as ion_nav_pop, NavPush as ion_nav_push, NavSetRoot as ion_nav_set_root };\n"],"sourceRoot":"webpack:///","file":"41-es5.js"}
{"version":3,"sources":["src/app/auth/reset-password/reset-password.page.html","src/app/auth/reset-password/reset-password-routing.module.ts","src/app/auth/reset-password/reset-password.module.ts","src/app/auth/reset-password/reset-password.page.scss","src/app/auth/reset-password/reset-password.page.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-content class=\\\"sec-login\\\" ion-padding>\\r\\n  <ion-row>\\r\\n    <ion-col class=\\\"ion-padding ion-text-center\\\">\\r\\n      <div class=\\\"login-logo ion-text-center\\\">\\r\\n        <ion-icon ios=\\\"ios-arrow-back\\\" md=\\\"md-arrow-back\\\" [routerLink]=\\\"['/forgot']\\\" class=\\\"back-icon\\\"></ion-icon>\\r\\n        <img src=\\\"../../../assets/images/logo.png\\\">  \\r\\n      </div> \\r\\n      <ion-label class=\\\"text-white\\\">Please enter your unique code and set your new password</ion-label> \\r\\n      <form class=\\\"login-form mt-20\\\" [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">             \\r\\n        <ion-item class=\\\"ion-no-padding\\\">\\r\\n          <ion-input type=\\\"number\\\" placeholder=\\\"Unique Code\\\" formControlName=\\\"ucode\\\"></ion-input>\\r\\n        </ion-item>\\r\\n        <ng-container *ngFor=\\\"let validation of validation_messages.ucode\\\">\\r\\n          <span class=\\\"error-message\\\" *ngIf=\\\"(submitted || loginForm.get('ucode').touched) && loginForm.get('ucode').hasError(validation.type)\\\">{{ validation.message }}</span>\\r\\n        </ng-container>\\r\\n\\r\\n        <ion-item class=\\\"ion-no-padding\\\">\\r\\n          <ion-input  placeholder=\\\"New Password\\\" formControlName=\\\"newPassword\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.newPassword.errors }\\\" [type]=\\\"npwd ? 'text' : 'password'\\\"></ion-input>\\r\\n          <span toggle=\\\"#newPassword-field\\\" class=\\\"change-toggle-password\\\">\\r\\n            <ion-icon color=\\\"light\\\" [name]=\\\"npwd ? 'eye' : 'eye-off'\\\" (click)=\\\"npwd=!npwd\\\"></ion-icon>\\r\\n          </span>\\r\\n        </ion-item>\\r\\n        <ng-container *ngFor=\\\"let validation of validation_messages.newPassword\\\">\\r\\n          <span class=\\\"error-message\\\" *ngIf=\\\"(submitted || loginForm.get('newPassword').touched) && loginForm.get('newPassword').hasError(validation.type)\\\">{{ validation.message }}</span>\\r\\n        </ng-container>\\r\\n\\r\\n        <ion-item class=\\\"ion-no-padding\\\">\\r\\n          <ion-input type=\\\"password\\\" placeholder=\\\"Confirm Password\\\" formControlName=\\\"cPassword\\\"></ion-input>\\r\\n          <span toggle=\\\"#newPassword-field\\\" class=\\\"change-toggle-password\\\">\\r\\n            <ion-icon color=\\\"light\\\" [name]=\\\"npwd ? 'eye' : 'eye-off'\\\" (click)=\\\"npwd=!npwd\\\"></ion-icon>\\r\\n          </span>\\r\\n        </ion-item>\\r\\n        <ng-container *ngFor=\\\"let validation of validation_messages.cPassword\\\">\\r\\n          <span class=\\\"error-message\\\" *ngIf=\\\"(submitted || loginForm.get('cPassword').touched) && loginForm.get('cPassword').hasError(validation.type)\\\">{{ validation.message }}</span>\\r\\n          <ion-input placeholder=\\\"\\\" type=\\\"hidden\\\" formControlName=\\\"uemail\\\" ></ion-input>\\r\\n        </ng-container>  \\r\\n        <ion-button (ngSubmit)=\\\"onSubmit()\\\" (click)=\\\"onSubmit()\\\" expand=\\\"block\\\" class=\\\"green ion-text-uppercase mt-20\\\">Reset Password</ion-button>\\r\\n      </form>\\r\\n    </ion-col>\\r\\n  </ion-row>\\r\\n</ion-content>\"","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ResetPasswordPage } from './reset-password.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ResetPasswordPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ResetPasswordPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { ResetPasswordPageRoutingModule } from './reset-password-routing.module';\r\n\r\nimport { ResetPasswordPage } from './reset-password.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ResetPasswordPageRoutingModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [ResetPasswordPage]\r\n})\r\nexport class ResetPasswordPageModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcmVzZXQtcGFzc3dvcmQvcmVzZXQtcGFzc3dvcmQucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl,FormGroup,FormBuilder,Validators } from '@angular/forms';\r\nimport { PasswordValidator } from '../../validators/password.validator';\r\nimport {AuthService} from '../../services/auth.service';\r\nimport { Router, RouterModule, ActivatedRoute,ParamMap } from '@angular/router';\r\nimport {Storage} from '@ionic/storage';\r\nimport { MustMatch } from '../../helpers/formvalidator'\r\nimport { CommonService } from './../../services/common.service'\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.page.html',\r\n  styleUrls: ['./reset-password.page.scss','./../../app.component.scss'],\r\n})\r\nexport class ResetPasswordPage implements OnInit {\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  email: string;\r\n  constructor(public formBuilder: FormBuilder,\r\n              public router: Router,\r\n              public storage: Storage,\r\n              private authService:AuthService,\r\n              private commonService: CommonService,\r\n              private activatedRoute: ActivatedRoute) { \r\n\r\n                this.activatedRoute.paramMap.subscribe((params: ParamMap) => {                 \r\n                  this.email = params.get('emailid');\r\n                });\r\n              }\r\n\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      ucode: ['', Validators.required],\r\n      newPassword: new FormControl('', Validators.compose([\r\n        PasswordValidator.areEqual,\r\n          Validators.maxLength(25),\r\n          Validators.minLength(5),\r\n          Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$'),\r\n          Validators.required\r\n        ])), \r\n       cPassword: ['', Validators.required],\r\n       uemail: ['']\r\n  }, {\r\n      validator: MustMatch('newPassword', 'cPassword')\r\n    });\r\n  }\r\n\r\n  validation_messages = {\r\n    'ucode': [\r\n      { type: 'required', message: 'Code is required.' },\r\n    ],\r\n    'newPassword': [\r\n      { type: 'required', message: 'Password is required.' },\r\n      { type: 'pattern', message: 'Password must be at least 8 characters,  1 Uppercase , 1 number , 1 Special character' },\r\n      { type: 'mustMatch', message: 'Password do not match.'},\r\n    ],\r\n    'cPassword': [\r\n      { type: 'required', message: 'Password is required.'},\r\n      { type: 'mustMatch', message: 'Password do not match.'},\r\n    \r\n    ],\r\n   };\r\n   \r\n   get f() { return this.loginForm.controls; }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n        return;\r\n    }\r\n    this.commonService.presentLoader();\r\n    this.loginForm.get('uemail').setValue(this.email);\r\n    this.authService.updatePassword(this.loginForm.value).subscribe((data:any)=>{\r\n      console.log(data);\r\n      if(data.status==true)\r\n      {\r\n        this.commonService.dismissLoader();\r\n        this.router.navigateByUrl('signin');\r\n      }else if(data.message){\r\n        this.commonService.dismissLoader();\r\n        this.commonService.presentToast(data.message);\r\n      }else{\r\n        this.commonService.dismissLoader();\r\n        this.commonService.presentToast(data.status);\r\n      }\r\n    },\r\n    err=>{ console.log(err)  }  );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"auth-reset-password-reset-password-module-es5.js"}
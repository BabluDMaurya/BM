{"version":3,"sources":["node_modules/ng-lazyload-image/fesm2015/ng-lazyload-image.js"],"names":[],"mappings":"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","sourcesContent":["import { Subject, of, Observable, ReplaySubject, never, empty } from 'rxjs';\nimport { filter, tap, take, mergeMap, map, catchError, switchMap, startWith, sampleTime, share } from 'rxjs/operators';\nimport { isPlatformServer } from '@angular/common';\nimport { InjectionToken, EventEmitter, Directive, ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, NgModule } from '@angular/core';\n\nfunction getNavigator() {\n    return typeof window !== 'undefined' ? window.navigator : undefined;\n}\nfunction isChildOfPicture(element) {\n    return Boolean(element.parentElement && element.parentElement.nodeName.toLowerCase() === 'picture');\n}\nfunction isImageElement(element) {\n    return element.nodeName.toLowerCase() === 'img';\n}\nfunction setImage(element, imagePath, useSrcset) {\n    if (isImageElement(element)) {\n        if (useSrcset && 'srcset' in element) {\n            element.srcset = imagePath;\n        }\n        else {\n            element.src = imagePath;\n        }\n    }\n    else {\n        element.style.backgroundImage = `url('${imagePath}')`;\n    }\n    return element;\n}\nfunction setSources(attrName) {\n    return (image) => {\n        const sources = image.parentElement.getElementsByTagName('source');\n        for (let i = 0; i < sources.length; i++) {\n            const attrValue = sources[i].getAttribute(attrName);\n            if (attrValue) {\n                // Check if `srcset` is supported by the current browser\n                if ('srcset' in sources[i]) {\n                    sources[i].srcset = attrValue;\n                }\n                else {\n                    sources[i].src = attrValue;\n                }\n            }\n        }\n    };\n}\nconst setSourcesToDefault = setSources('defaultImage');\nconst setSourcesToLazy = setSources('lazyLoad');\nconst setSourcesToError = setSources('errorImage');\nfunction setImageAndSources(setSourcesFn) {\n    return (element, imagePath, useSrcset) => {\n        if (isImageElement(element) && isChildOfPicture(element)) {\n            setSourcesFn(element);\n        }\n        if (imagePath) {\n            setImage(element, imagePath, useSrcset);\n        }\n    };\n}\nconst setImageAndSourcesToDefault = setImageAndSources(setSourcesToDefault);\nconst setImageAndSourcesToLazy = setImageAndSources(setSourcesToLazy);\nconst setImageAndSourcesToError = setImageAndSources(setSourcesToError);\n\nclass Hooks {\n    constructor() {\n        this.navigator = getNavigator();\n    }\n    setPlatformId(platformId) {\n        this.platformId = platformId;\n    }\n    onDestroy(attributes) { }\n    onAttributeChange(newAttributes) { }\n}\n\nconst cssClassNames = {\n    loaded: 'ng-lazyloaded',\n    loading: 'ng-lazyloading',\n    failed: 'ng-failed-lazyloaded',\n};\nfunction removeCssClassName(element, cssClassName) {\n    element.className = element.className.replace(cssClassName, '');\n}\nfunction addCssClassName(element, cssClassName) {\n    if (!element.className.includes(cssClassName)) {\n        element.className += ` ${cssClassName}`;\n    }\n}\nfunction hasCssClassName(element, cssClassName) {\n    return element.className && element.className.includes(cssClassName);\n}\n\nclass SharedHooks extends Hooks {\n    setup(attributes) {\n        setImageAndSourcesToDefault(attributes.element, attributes.defaultImagePath, attributes.useSrcset);\n        addCssClassName(attributes.element, cssClassNames.loading);\n        if (hasCssClassName(attributes.element, cssClassNames.loaded)) {\n            removeCssClassName(attributes.element, cssClassNames.loaded);\n        }\n    }\n    finally(attributes) {\n        addCssClassName(attributes.element, cssClassNames.loaded);\n        removeCssClassName(attributes.element, cssClassNames.loading);\n    }\n    loadImage(attributes) {\n        if (this.skipLazyLoading(attributes)) {\n            // Set the image right away for bots for better SEO\n            return [attributes.imagePath];\n        }\n        const { element, useSrcset, imagePath, decode } = attributes;\n        let img;\n        if (isImageElement(element) && isChildOfPicture(element)) {\n            const parentClone = element.parentNode.cloneNode(true);\n            img = parentClone.getElementsByTagName('img')[0];\n            setSourcesToLazy(img);\n            setImage(img, imagePath, useSrcset);\n        }\n        else {\n            img = new Image();\n            if (isImageElement(element) && element.referrerPolicy) {\n                img.referrerPolicy = element.referrerPolicy;\n            }\n            if (isImageElement(element) && element.sizes) {\n                img.sizes = element.sizes;\n            }\n            if (useSrcset && 'srcset' in img) {\n                img.srcset = imagePath;\n            }\n            else {\n                img.src = imagePath;\n            }\n        }\n        if (decode && img.decode) {\n            return img.decode().then(() => imagePath);\n        }\n        return new Promise((resolve, reject) => {\n            img.onload = () => resolve(imagePath);\n            img.onerror = () => reject(null);\n        });\n    }\n    setErrorImage(error, attributes) {\n        const { element, useSrcset, errorImagePath } = attributes;\n        setImageAndSourcesToError(element, errorImagePath, useSrcset);\n        addCssClassName(element, cssClassNames.failed);\n    }\n    setLoadedImage(imagePath, attributes) {\n        const { element, useSrcset } = attributes;\n        setImageAndSourcesToLazy(element, imagePath, useSrcset);\n    }\n    isDisabled() {\n        // Disable if SSR and the user isn't a bot\n        return isPlatformServer(this.platformId) && !this.isBot();\n    }\n    skipLazyLoading(attributes) {\n        return this.isBot(attributes);\n    }\n    isBot(attributes) {\n        var _a;\n        if ((_a = this.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) {\n            return /googlebot|bingbot|yandex|baiduspider|facebookexternalhit|twitterbot|rogerbot|linkedinbot|embedly|quora\\ link\\ preview|showyoubot|outbrain|pinterest\\/0\\.|pinterestbot|slackbot|vkShare|W3C_Validator|whatsapp|duckduckbot/i.test(this.navigator.userAgent);\n        }\n        return false;\n    }\n}\n\nclass IntersectionObserverHooks extends SharedHooks {\n    constructor() {\n        super(...arguments);\n        this.observers = new WeakMap();\n        this.intersectionSubject = new Subject();\n        this.uniqKey = {};\n    }\n    getObservable(attributes) {\n        if (this.skipLazyLoading(attributes)) {\n            return of({ isIntersecting: true });\n        }\n        if (attributes.customObservable) {\n            return attributes.customObservable;\n        }\n        const scrollContainerKey = attributes.scrollContainer || this.uniqKey;\n        const options = {\n            root: attributes.scrollContainer || null,\n        };\n        if (attributes.offset) {\n            options.rootMargin = `${attributes.offset}px`;\n        }\n        let observer = this.observers.get(scrollContainerKey);\n        if (!observer) {\n            observer = new IntersectionObserver((entrys) => this.loadingCallback(entrys), options);\n            this.observers.set(scrollContainerKey, observer);\n        }\n        observer.observe(attributes.element);\n        return Observable.create((obs) => {\n            const subscription = this.intersectionSubject.pipe(filter((entry) => entry.target === attributes.element)).subscribe(obs);\n            return () => {\n                subscription.unsubscribe();\n                observer.unobserve(attributes.element);\n            };\n        });\n    }\n    isVisible(event) {\n        return event.isIntersecting;\n    }\n    loadingCallback(entrys) {\n        entrys.forEach((entry) => this.intersectionSubject.next(entry));\n    }\n}\n\nfunction lazyLoadImage(hooks, attributes) {\n    return (evntObservable) => {\n        return evntObservable.pipe(tap((data) => attributes.onStateChange.emit({ reason: 'observer-emit', data })), filter((event) => hooks.isVisible(event, attributes)), take(1), tap(() => attributes.onStateChange.emit({ reason: 'start-loading' })), mergeMap(() => hooks.loadImage(attributes)), tap(() => attributes.onStateChange.emit({ reason: 'mount-image' })), tap((imagePath) => hooks.setLoadedImage(imagePath, attributes)), tap(() => attributes.onStateChange.emit({ reason: 'loading-succeeded' })), map(() => true), catchError((error) => {\n            attributes.onStateChange.emit({ reason: 'loading-failed', data: error });\n            hooks.setErrorImage(error, attributes);\n            return of(false);\n        }), tap(() => {\n            attributes.onStateChange.emit({ reason: 'finally' });\n            hooks.finally(attributes);\n        }));\n    };\n}\n\nconst LAZYLOAD_IMAGE_HOOKS = new InjectionToken('LazyLoadImageHooks');\n\nclass LazyLoadImageDirective {\n    constructor(el, ngZone, platformId, hooks) {\n        this.onStateChange = new EventEmitter(); // Emits an event on every state change\n        this.elementRef = el;\n        this.ngZone = ngZone;\n        this.propertyChanges$ = new ReplaySubject();\n        this.hooks = hooks;\n        this.hooks.setPlatformId(platformId);\n        this.uid = Math.random().toString(36).substr(2, 9);\n    }\n    ngOnChanges() {\n        if (this.debug === true && !this.debugSubscription) {\n            this.debugSubscription = this.onStateChange.subscribe((e) => console.log(e));\n        }\n        this.propertyChanges$.next({\n            element: this.elementRef.nativeElement,\n            imagePath: this.lazyImage,\n            defaultImagePath: this.defaultImage,\n            errorImagePath: this.errorImage,\n            useSrcset: this.useSrcset,\n            offset: this.offset ? this.offset | 0 : 0,\n            scrollContainer: this.scrollTarget,\n            customObservable: this.customObservable,\n            decode: this.decode,\n            onStateChange: this.onStateChange,\n            id: this.uid,\n        });\n    }\n    ngAfterContentInit() {\n        if (this.hooks.isDisabled()) {\n            return null;\n        }\n        this.ngZone.runOutsideAngular(() => {\n            this.loadSubscription = this.propertyChanges$\n                .pipe(tap((attributes) => this.hooks.onAttributeChange(attributes)), tap((attributes) => attributes.onStateChange.emit({ reason: 'setup' })), tap((attributes) => this.hooks.setup(attributes)), switchMap((attributes) => {\n                if (!attributes.imagePath) {\n                    return never();\n                }\n                return this.hooks.getObservable(attributes).pipe(lazyLoadImage(this.hooks, attributes));\n            }))\n                .subscribe({\n                next: () => null,\n            });\n        });\n    }\n    ngOnDestroy() {\n        var _a, _b;\n        this.propertyChanges$\n            .pipe(take(1))\n            .subscribe({ next: (attributes) => this.hooks.onDestroy(attributes) })\n            .unsubscribe();\n        (_a = this.loadSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        (_b = this.debugSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();\n    }\n}\nLazyLoadImageDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[lazyLoad]',\n            },] }\n];\nLazyLoadImageDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: Hooks, decorators: [{ type: Inject, args: [LAZYLOAD_IMAGE_HOOKS,] }] }\n];\nLazyLoadImageDirective.propDecorators = {\n    lazyImage: [{ type: Input, args: ['lazyLoad',] }],\n    defaultImage: [{ type: Input }],\n    errorImage: [{ type: Input }],\n    scrollTarget: [{ type: Input }],\n    customObservable: [{ type: Input }],\n    offset: [{ type: Input }],\n    useSrcset: [{ type: Input }],\n    decode: [{ type: Input }],\n    debug: [{ type: Input }],\n    onStateChange: [{ type: Output }]\n};\n\nclass LazyLoadImageModule {\n}\nLazyLoadImageModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [LazyLoadImageDirective],\n                exports: [LazyLoadImageDirective],\n                providers: [{ provide: LAZYLOAD_IMAGE_HOOKS, useClass: IntersectionObserverHooks }],\n            },] }\n];\n\nclass Rect {\n    constructor(left, top, right, bottom) {\n        this.left = left;\n        this.top = top;\n        this.right = right;\n        this.bottom = bottom;\n    }\n    static fromElement(element) {\n        const { left, top, right, bottom } = element.getBoundingClientRect();\n        if (left === 0 && top === 0 && right === 0 && bottom === 0) {\n            return Rect.empty;\n        }\n        else {\n            return new Rect(left, top, right, bottom);\n        }\n    }\n    static fromWindow(_window) {\n        return new Rect(0, 0, _window.innerWidth, _window.innerHeight);\n    }\n    inflate(inflateBy) {\n        this.left -= inflateBy;\n        this.top -= inflateBy;\n        this.right += inflateBy;\n        this.bottom += inflateBy;\n    }\n    intersectsWith(rect) {\n        return rect.left < this.right && this.left < rect.right && rect.top < this.bottom && this.top < rect.bottom;\n    }\n    getIntersectionWith(rect) {\n        const left = Math.max(this.left, rect.left);\n        const top = Math.max(this.top, rect.top);\n        const right = Math.min(this.right, rect.right);\n        const bottom = Math.min(this.bottom, rect.bottom);\n        if (right >= left && bottom >= top) {\n            return new Rect(left, top, right, bottom);\n        }\n        else {\n            return Rect.empty;\n        }\n    }\n}\nRect.empty = new Rect(0, 0, 0, 0);\n\nclass ScrollHooks extends SharedHooks {\n    constructor() {\n        super(...arguments);\n        this.getWindow = () => window;\n        this.scrollListeners = new WeakMap();\n        // Only create one scroll listener per target and share the observable.\n        // Typical, there will only be one observable per application\n        this.getScrollListener = (scrollTarget) => {\n            if (!scrollTarget || typeof scrollTarget.addEventListener !== 'function') {\n                console.warn('`addEventListener` on ' + scrollTarget + ' (scrollTarget) is not a function. Skipping this target');\n                return empty();\n            }\n            const scrollListener = this.scrollListeners.get(scrollTarget);\n            if (scrollListener) {\n                return scrollListener;\n            }\n            const srollEvent = Observable.create((observer) => {\n                const eventName = 'scroll';\n                const handler = (event) => observer.next(event);\n                const options = { passive: true, capture: false };\n                scrollTarget.addEventListener(eventName, handler, options);\n                return () => scrollTarget.removeEventListener(eventName, handler, options);\n            });\n            const listener = this.sampleObservable(srollEvent);\n            this.scrollListeners.set(scrollTarget, listener);\n            return listener;\n        };\n    }\n    getObservable(attributes) {\n        if (this.skipLazyLoading(attributes)) {\n            return of('load');\n        }\n        else if (attributes.customObservable) {\n            return attributes.customObservable.pipe(startWith(''));\n        }\n        else if (attributes.scrollContainer) {\n            return this.getScrollListener(attributes.scrollContainer);\n        }\n        return this.getScrollListener(this.getWindow());\n    }\n    isVisible(event, attributes) {\n        const elementBounds = Rect.fromElement(attributes.element);\n        if (elementBounds === Rect.empty) {\n            return false;\n        }\n        const windowBounds = Rect.fromWindow(this.getWindow());\n        elementBounds.inflate(attributes.offset);\n        if (attributes.scrollContainer) {\n            const scrollContainerBounds = Rect.fromElement(attributes.scrollContainer);\n            const intersection = scrollContainerBounds.getIntersectionWith(windowBounds);\n            return elementBounds.intersectsWith(intersection);\n        }\n        else {\n            return elementBounds.intersectsWith(windowBounds);\n        }\n    }\n    sampleObservable(obs, scheduler) {\n        return obs.pipe(sampleTime(100, scheduler), share(), startWith(''));\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Hooks, IntersectionObserverHooks, LAZYLOAD_IMAGE_HOOKS, LazyLoadImageDirective, LazyLoadImageModule, ScrollHooks, SharedHooks };\n//# sourceMappingURL=ng-lazyload-image.js.map\n"],"sourceRoot":"webpack:///","file":"default~bookmark-bookmark-module~chats-chat-list-chat-list-module~chats-first-message-first-message-~8690c7bc-es5.js"}
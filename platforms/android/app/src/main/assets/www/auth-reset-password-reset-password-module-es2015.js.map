{"version":3,"sources":["./src/app/auth/reset-password/reset-password.page.html","./src/app/auth/reset-password/reset-password-routing.module.ts","./src/app/auth/reset-password/reset-password.module.ts","./src/app/auth/reset-password/reset-password.page.scss","./src/app/auth/reset-password/reset-password.page.ts"],"names":[],"mappings":"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","file":"auth-reset-password-reset-password-module-es2015.js","sourcesContent":["export default \"<ion-content class=\\\"sec-login\\\" ion-padding>\\r\\n  <ion-row>\\r\\n    <ion-col class=\\\"ion-padding ion-text-center\\\">\\r\\n      <div class=\\\"login-logo ion-text-center\\\">\\r\\n        <ion-icon ios=\\\"ios-arrow-back\\\" md=\\\"md-arrow-back\\\" [routerLink]=\\\"['/forgot']\\\" class=\\\"back-icon\\\"></ion-icon>\\r\\n        <img src=\\\"../../../assets/images/logo.png\\\">  \\r\\n      </div> \\r\\n      <ion-label class=\\\"text-white\\\">Please enter your unique code and set your new password</ion-label> \\r\\n      <form class=\\\"login-form mt-20\\\" [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">             \\r\\n        <ion-item class=\\\"ion-no-padding\\\">\\r\\n          <ion-input type=\\\"number\\\" placeholder=\\\"Unique Code\\\" formControlName=\\\"ucode\\\"></ion-input>\\r\\n        </ion-item>\\r\\n        <ng-container *ngFor=\\\"let validation of validation_messages.ucode\\\">\\r\\n          <span class=\\\"error-message\\\" *ngIf=\\\"(submitted || loginForm.get('ucode').touched) && loginForm.get('ucode').hasError(validation.type)\\\">{{ validation.message }}</span>\\r\\n        </ng-container>\\r\\n\\r\\n        <ion-item class=\\\"ion-no-padding\\\">\\r\\n          <ion-input  placeholder=\\\"New Password\\\" formControlName=\\\"newPassword\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.newPassword.errors }\\\" [type]=\\\"npwd ? 'text' : 'password'\\\"></ion-input>\\r\\n          <span toggle=\\\"#newPassword-field\\\" class=\\\"change-toggle-password\\\">\\r\\n            <ion-icon color=\\\"light\\\" [name]=\\\"npwd ? 'eye' : 'eye-off'\\\" (click)=\\\"npwd=!npwd\\\"></ion-icon>\\r\\n          </span>\\r\\n        </ion-item>\\r\\n        <ng-container *ngFor=\\\"let validation of validation_messages.newPassword\\\">\\r\\n          <span class=\\\"error-message\\\" *ngIf=\\\"(submitted || loginForm.get('newPassword').touched) && loginForm.get('newPassword').hasError(validation.type)\\\">{{ validation.message }}</span>\\r\\n        </ng-container>\\r\\n\\r\\n        <ion-item class=\\\"ion-no-padding\\\">\\r\\n          <ion-input type=\\\"password\\\" placeholder=\\\"Confirm Password\\\" formControlName=\\\"cPassword\\\"></ion-input>\\r\\n          <span toggle=\\\"#newPassword-field\\\" class=\\\"change-toggle-password\\\">\\r\\n            <ion-icon color=\\\"light\\\" [name]=\\\"npwd ? 'eye' : 'eye-off'\\\" (click)=\\\"npwd=!npwd\\\"></ion-icon>\\r\\n          </span>\\r\\n        </ion-item>\\r\\n        <ng-container *ngFor=\\\"let validation of validation_messages.cPassword\\\">\\r\\n          <span class=\\\"error-message\\\" *ngIf=\\\"(submitted || loginForm.get('cPassword').touched) && loginForm.get('cPassword').hasError(validation.type)\\\">{{ validation.message }}</span>\\r\\n          <ion-input placeholder=\\\"\\\" type=\\\"hidden\\\" formControlName=\\\"uemail\\\" ></ion-input>\\r\\n        </ng-container>  \\r\\n        <ion-button (ngSubmit)=\\\"onSubmit()\\\" (click)=\\\"onSubmit()\\\" expand=\\\"block\\\" class=\\\"green ion-text-uppercase mt-20\\\">Reset Password</ion-button>\\r\\n      </form>\\r\\n    </ion-col>\\r\\n  </ion-row>\\r\\n</ion-content>\"","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ResetPasswordPage } from './reset-password.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ResetPasswordPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ResetPasswordPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { ResetPasswordPageRoutingModule } from './reset-password-routing.module';\r\n\r\nimport { ResetPasswordPage } from './reset-password.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ResetPasswordPageRoutingModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  declarations: [ResetPasswordPage]\r\n})\r\nexport class ResetPasswordPageModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcmVzZXQtcGFzc3dvcmQvcmVzZXQtcGFzc3dvcmQucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl,FormGroup,FormBuilder,Validators } from '@angular/forms';\r\nimport { PasswordValidator } from '../../validators/password.validator';\r\nimport {AuthService} from '../../services/auth.service';\r\nimport { Router, RouterModule, ActivatedRoute,ParamMap } from '@angular/router';\r\nimport {Storage} from '@ionic/storage';\r\nimport { MustMatch } from '../../helpers/formvalidator'\r\nimport { CommonService } from './../../services/common.service'\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.page.html',\r\n  styleUrls: ['./reset-password.page.scss','./../../app.component.scss'],\r\n})\r\nexport class ResetPasswordPage implements OnInit {\r\n  loginForm: FormGroup;\r\n  submitted = false;\r\n  email: string;\r\n  constructor(public formBuilder: FormBuilder,\r\n              public router: Router,\r\n              public storage: Storage,\r\n              private authService:AuthService,\r\n              private commonService: CommonService,\r\n              private activatedRoute: ActivatedRoute) { \r\n\r\n                this.activatedRoute.paramMap.subscribe((params: ParamMap) => {                 \r\n                  this.email = params.get('emailid');\r\n                });\r\n              }\r\n\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formBuilder.group({\r\n      ucode: ['', Validators.required],\r\n      newPassword: new FormControl('', Validators.compose([\r\n        PasswordValidator.areEqual,\r\n          Validators.maxLength(25),\r\n          Validators.minLength(5),\r\n          Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,}$'),\r\n          Validators.required\r\n        ])), \r\n       cPassword: ['', Validators.required],\r\n       uemail: ['']\r\n  }, {\r\n      validator: MustMatch('newPassword', 'cPassword')\r\n    });\r\n  }\r\n\r\n  validation_messages = {\r\n    'ucode': [\r\n      { type: 'required', message: 'Code is required.' },\r\n    ],\r\n    'newPassword': [\r\n      { type: 'required', message: 'Password is required.' },\r\n      { type: 'pattern', message: 'Password must be at least 8 characters,  1 Uppercase , 1 number , 1 Special character' },\r\n      { type: 'mustMatch', message: 'Password do not match.'},\r\n    ],\r\n    'cPassword': [\r\n      { type: 'required', message: 'Password is required.'},\r\n      { type: 'mustMatch', message: 'Password do not match.'},\r\n    \r\n    ],\r\n   };\r\n   \r\n   get f() { return this.loginForm.controls; }\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // stop here if form is invalid\r\n    if (this.loginForm.invalid) {\r\n        return;\r\n    }\r\n    this.commonService.presentLoader();\r\n    this.loginForm.get('uemail').setValue(this.email);\r\n    this.authService.updatePassword(this.loginForm.value).subscribe((data:any)=>{\r\n      console.log(data);\r\n      if(data.status==true)\r\n      {\r\n        this.commonService.dismissLoader();\r\n        this.router.navigateByUrl('signin');\r\n      }else if(data.message){\r\n        this.commonService.dismissLoader();\r\n        this.commonService.presentToast(data.message);\r\n      }else{\r\n        this.commonService.dismissLoader();\r\n        this.commonService.presentToast(data.status);\r\n      }\r\n    },\r\n    err=>{ console.log(err)  }  );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}